// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetTester
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {

            // Launch '..\..\..\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.RecordedMethod1Params.ExePath, this.RecordedMethod1Params.AlternateExePath);
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinWindow uISpreadsheetprogramunWindow = this.UISpreadsheetprogramunWindow;
            #endregion

            // Verify that 'Spreadsheet program - untitled' window's property 'Name' equals 'Spreadsheet program - untitled'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UISpreadsheetprogramunWindowName, uISpreadsheetprogramunWindow.Name);

            // Verify that 'Spreadsheet program - untitled' window's property 'Exists' equals 'True'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UISpreadsheetprogramunWindowExists, uISpreadsheetprogramunWindow.Exists);
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISpreadsheetprogramunWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(33, 10));
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinWindow uISpreadsheetprogramunWindow1 = this.UISpreadsheetprogramunWindow1;
            #endregion

            // Verify that 'Spreadsheet program - untitled' window's property 'Name' equals 'Spreadsheet program - untitled'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UISpreadsheetprogramunWindow1Name, uISpreadsheetprogramunWindow1.Name);

            // Verify that 'Spreadsheet program - untitled' window's property 'Exists' equals 'True'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UISpreadsheetprogramunWindow1Exists, uISpreadsheetprogramunWindow1.Exists);
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinMenuItem uICloseMenuItem = this.UISpreadsheetprogramunWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinEdit uIContentBoxEdit = this.UISpreadsheetprogramunWindow.UIContentBoxWindow.UIContentBoxEdit;
            #endregion

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(69, 12));

            // Type '=aa3' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod3Params.UIContentBoxEditText;

            // Type '{Enter}' in 'ContentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.RecordedMethod3Params.UIContentBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinText uIAformulamayonlycontaText = this.UIInvalidFormulaWindow.UIAformulamayonlycontaWindow.UIAformulamayonlycontaText;
            #endregion

            // Verify that 'A formula may only contain (, ), +, -, *, /, numbe...' label's property 'DisplayText' equals 'A formula may only contain (, ), +, -, *, /, numbers and variables.'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIAformulamayonlycontaTextDisplayText, uIAformulamayonlycontaText.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod4 - Use 'RecordedMethod4Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIInvalidFormulaWindow.UIOKWindow.UIOKButton;
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetprogramunWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentBoxEdit = this.UISpreadsheetprogramunWindow.UIContentBoxWindow.UIContentBoxEdit;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(18, 11));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(363, 13));

            // Type '=a1' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod4Params.UIContentBoxEditText;

            // Type '{Enter}' in 'ContentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.RecordedMethod4Params.UIContentBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinText uICircularreferencesarText = this.UICircularReferenceWindow.UICircularreferencesarWindow.UICircularreferencesarText;
            #endregion

            // Verify that 'Circular references are not permitted. A circular ...' label's property 'DisplayText' equals 'Circular references are not permitted.
            //A circular reference is created when a cell in a formula depends on itself for value, e.g. when a cell in a formula refers to itself, or when a cell refers to another cell which itself refers to the original cell.'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UICircularreferencesarTextDisplayText, uICircularreferencesarText.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UICircularReferenceWindow.UIOKWindow.UIOKButton;
            WinEdit uIContentBoxEdit = this.UISpreadsheetprogramunWindow.UIContentBoxWindow.UIContentBoxEdit;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(42, 19));


            // Type '=A2' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod5Params.UIContentBoxEditText;

            // Type '{Enter}' in 'ContentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.RecordedMethod5Params.UIContentBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod5 - Use 'AssertMethod5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            WinEdit uICellNameBoxEdit = this.UISpreadsheetprogramunWindow.UIA1Window.UICellNameBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetprogramunWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uIContentBoxEdit = this.UISpreadsheetprogramunWindow.UIContentBoxWindow.UIContentBoxEdit;
            #endregion

            // Verify that 'CellNameBox' text box's property 'Text' equals 'A1'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);

            // Verify that 'ValueBox' text box's property 'Text' equals 'FormulaError. Variable A2 uknown.'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that 'ContentBox' text box's property 'Text' equals '=A2'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UIContentBoxEditText, uIContentBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod6 - Use 'RecordedMethod6Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetprogramunWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentBoxEdit = this.UISpreadsheetprogramunWindow.UIContentBoxWindow.UIContentBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(85, 59));

            // Type 'cat' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod6Params.UIContentBoxEditText;

            // Type '{Enter}' in 'ContentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.RecordedMethod6Params.UIContentBoxEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod6 - Use 'AssertMethod6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod6()
        {
            #region Variable Declarations
            WinEdit uICellNameBoxEdit = this.UISpreadsheetprogramunWindow.UIA1Window.UICellNameBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetprogramunWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uIContentBoxEdit = this.UISpreadsheetprogramunWindow.UIContentBoxWindow.UIContentBoxEdit;
            #endregion

            // Verify that 'CellNameBox' text box's property 'Text' equals 'A2'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);

            // Verify that 'ValueBox' text box's property 'Text' equals 'cat'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that 'ContentBox' text box's property 'Text' equals 'cat'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UIContentBoxEditText, uIContentBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod7
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetprogramunWindow.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(65, 46));
        }
        
        /// <summary>
        /// AssertMethod7 - Use 'AssertMethod7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod7()
        {
            #region Variable Declarations
            WinEdit uICellNameBoxEdit = this.UISpreadsheetprogramunWindow.UIA1Window.UICellNameBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetprogramunWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uIContentBoxEdit = this.UISpreadsheetprogramunWindow.UIContentBoxWindow.UIContentBoxEdit;
            #endregion

            // Verify that 'CellNameBox' text box's property 'Text' equals 'A1'
            Assert.AreEqual(this.AssertMethod7ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);

            // Verify that 'ValueBox' text box's property 'Text' equals 'FormulaError. Variable A2 uknown.'
            Assert.AreEqual(this.AssertMethod7ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that 'ContentBox' text box's property 'Text' equals '=A2'
            Assert.AreEqual(this.AssertMethod7ExpectedValues.UIContentBoxEditText, uIContentBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod8 - Use 'RecordedMethod8Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod8()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISpreadsheetprogramunWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIContentBoxEdit = this.UISpreadsheetprogramunWindow.UIContentBoxWindow.UIContentBoxEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(82, 60));

            // Type '45' in 'ContentBox' text box
            uIContentBoxEdit.Text = this.RecordedMethod8Params.UIContentBoxEditText;

            // Type '{Enter}' in 'ContentBox' text box
            Keyboard.SendKeys(uIContentBoxEdit, this.RecordedMethod8Params.UIContentBoxEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(91, 43));
        }
        
        /// <summary>
        /// AssertMethod8 - Use 'AssertMethod8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod8()
        {
            #region Variable Declarations
            WinEdit uICellNameBoxEdit = this.UISpreadsheetprogramunWindow.UIA1Window.UICellNameBoxEdit;
            WinEdit uIValueBoxEdit = this.UISpreadsheetprogramunWindow.UIValueBoxWindow.UIValueBoxEdit;
            WinEdit uIContentBoxEdit = this.UISpreadsheetprogramunWindow.UIContentBoxWindow.UIContentBoxEdit;
            #endregion

            // Verify that 'CellNameBox' text box's property 'Text' equals 'A1'
            Assert.AreEqual(this.AssertMethod8ExpectedValues.UICellNameBoxEditText, uICellNameBoxEdit.Text);

            // Verify that 'ValueBox' text box's property 'Text' equals '45'
            Assert.AreEqual(this.AssertMethod8ExpectedValues.UIValueBoxEditText, uIValueBoxEdit.Text);

            // Verify that 'ContentBox' text box's property 'Text' equals '=A2'
            Assert.AreEqual(this.AssertMethod8ExpectedValues.UIContentBoxEditText, uIContentBoxEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod9 - Use 'RecordedMethod9Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod9()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UISpreadsheetprogramunWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(37, 13));

            // Select 'test' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod9Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(55, 22));
        }
        
        /// <summary>
        /// AssertMethod9 - Use 'AssertMethod9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod9()
        {
            #region Variable Declarations
            WinTitleBar uISpreadsheetprogramteTitleBar = this.UISpreadsheetprogramunWindow.UISpreadsheetprogramteTitleBar;
            #endregion

            // Verify that 'Spreadsheet program - test' title bar's property 'DisplayText' equals 'Spreadsheet program - test'
            Assert.AreEqual(this.AssertMethod9ExpectedValues.UISpreadsheetprogramteTitleBarDisplayText, uISpreadsheetprogramteTitleBar.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod10 - Use 'RecordedMethod10Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod10()
        {
            #region Variable Declarations
            WinMenuItem uISaveAsMenuItem = this.UISpreadsheetprogramunWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(52, 10));

            // Select 'test2' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod10Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(36, 12));
        }
        
        /// <summary>
        /// AssertMethod10 - Use 'AssertMethod10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod10()
        {
            #region Variable Declarations
            WinTitleBar uISpreadsheetprogramteTitleBar = this.UISpreadsheetprogramunWindow.UISpreadsheetprogramteTitleBar;
            #endregion

            // Verify that 'Spreadsheet program - test' title bar's property 'DisplayText' equals 'Spreadsheet program - test2'
            Assert.AreEqual(this.AssertMethod10ExpectedValues.UISpreadsheetprogramteTitleBarDisplayText, uISpreadsheetprogramteTitleBar.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod11 - Use 'RecordedMethod11Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod11()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UISpreadsheetprogramteWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinMenuItem uISaveAsMenuItem = this.UISpreadsheetprogramteWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinWindow uISaveAsWindow = this.UISaveAsWindow;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(70, 12));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(63, 8));

            // Select 'test' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod11Params.UIFilenameComboBoxEditableItem;

            // Click 'Save As' window
            Mouse.Click(uISaveAsWindow, new Point(508, 504));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(62, 13));
        }
        
        /// <summary>
        /// AssertMethod11 - Use 'AssertMethod11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod11()
        {
            #region Variable Declarations
            WinText uIThefiletestssalreadyText = this.UIContinuesaveWindow.UIThefiletestssalreadyWindow.UIThefiletestssalreadyText;
            #endregion

            // Verify that 'The file, "test.ss," already exists. The save oper...' label's property 'DisplayText' equals 'The file, "test.ss," already exists.
            //The save operation will overwrite this file, and all previous information will be lost.
            //Are you sure you want to continue?'
            Assert.AreEqual(this.AssertMethod11ExpectedValues.UIThefiletestssalreadyTextDisplayText, uIThefiletestssalreadyText.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod12 - Use 'RecordedMethod12Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod12()
        {
            #region Variable Declarations
            WinButton uINOButton = this.UIContinuesaveWindow.UINOWindow.UINOButton;
            WinMenuItem uISaveAsMenuItem = this.UISpreadsheetprogramteWindow1.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinButton uIYesButton = this.UIContinuesaveWindow.UIYesWindow.UIYesButton;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetprogramteWindow2.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UISelectaspreadsheetfiWindow.UIItemWindow.UITest2ListItem.UINameEdit;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetprogramteWindow11.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetprogramteWindow3.UIMenuStrip1MenuBar.UIFileMenuItem;
            WinMenuItem uIViewHelpMenuItem = this.UISpreadsheetprogramteWindow4.UIMenuStrip1MenuBar.UIHelpMenuItem.UIViewHelpMenuItem;
            WinButton uIYesButton1 = this.UIDefaultBrowserWindow.UIDefaultBrowserDialog.UIYesButton;
            WinControl uISpreadsheetHelpDocument = this.UISpreadsheetHelpMozilWindow.UIItemPropertyPage.UISpreadsheetHelpDocument;
            WinMenuItem uICloseMenuItem1 = this.UISpreadsheetprogramteWindow21.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(25, 14));

            // Click 'File' -> 'Save As' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(61, 9));

            // Select 'test' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod12Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod12Params.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(36, 15));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(35, 6));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(10, 9));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(50, 5));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(26, 13));

            // Click 'Help' -> 'View Help' menu item
            Mouse.Click(uIViewHelpMenuItem, new Point(39, 9));

            // Type 'Control + W' in 'Yes' button
            Keyboard.SendKeys(uIYesButton1, this.RecordedMethod12Params.UIYesButtonSendKeys, ModifierKeys.Control);

            // Click 'Spreadsheet Help' document
            Mouse.Click(uISpreadsheetHelpDocument, new Point(1287, 515));

            // Type 'Control + W' in 'Spreadsheet Help' document
            Keyboard.SendKeys(uISpreadsheetHelpDocument, this.RecordedMethod12Params.UISpreadsheetHelpDocumentSendKeys, ModifierKeys.Control);

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem1, new Point(71, 12));
        }
        
        /// <summary>
        /// RecordedMethod13 - Use 'RecordedMethod13Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod13()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetprogramunWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UISelectaspreadsheetfiWindow.UIItemWindow.UITesterssListItem.UINameEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetprogramunWindow = ApplicationUnderTest.Launch(this.RecordedMethod13Params.UISpreadsheetprogramunWindowExePath, this.RecordedMethod13Params.UISpreadsheetprogramunWindowAlternateExePath);

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(40, 3));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(22, 12));
        }
        
        /// <summary>
        /// AssertMethod12 - Use 'AssertMethod12ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod12()
        {
            #region Variable Declarations
            WinText uISpreadsheetcouldnotoText = this.UIOpenErrorWindow.UISpreadsheetcouldnotoWindow.UISpreadsheetcouldnotoText;
            #endregion

            // Verify that 'Spreadsheet could not open. Error. Exception of ty...' label's property 'Name' equals 'Spreadsheet could not open. Error. Exception of type 'SS.InvalidNameException' was thrown. Please close this spreadsheet window.'
            Assert.AreEqual(this.AssertMethod12ExpectedValues.UISpreadsheetcouldnotoTextName, uISpreadsheetcouldnotoText.Name);
        }
        
        /// <summary>
        /// RecordedMethod14
        /// </summary>
        public void RecordedMethod14()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOpenErrorWindow.UIOKWindow.UIOKButton;
            WinMenuItem uICloseMenuItem = this.UIForm1Window.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinMenuItem uICloseMenuItem1 = this.UISpreadsheetprogramunWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(57, 7));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(52, 13));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem1, new Point(51, 12));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public virtual RecordedMethod6Params RecordedMethod6Params
        {
            get
            {
                if ((this.mRecordedMethod6Params == null))
                {
                    this.mRecordedMethod6Params = new RecordedMethod6Params();
                }
                return this.mRecordedMethod6Params;
            }
        }
        
        public virtual AssertMethod6ExpectedValues AssertMethod6ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod6ExpectedValues == null))
                {
                    this.mAssertMethod6ExpectedValues = new AssertMethod6ExpectedValues();
                }
                return this.mAssertMethod6ExpectedValues;
            }
        }
        
        public virtual AssertMethod7ExpectedValues AssertMethod7ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod7ExpectedValues == null))
                {
                    this.mAssertMethod7ExpectedValues = new AssertMethod7ExpectedValues();
                }
                return this.mAssertMethod7ExpectedValues;
            }
        }
        
        public virtual RecordedMethod8Params RecordedMethod8Params
        {
            get
            {
                if ((this.mRecordedMethod8Params == null))
                {
                    this.mRecordedMethod8Params = new RecordedMethod8Params();
                }
                return this.mRecordedMethod8Params;
            }
        }
        
        public virtual AssertMethod8ExpectedValues AssertMethod8ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod8ExpectedValues == null))
                {
                    this.mAssertMethod8ExpectedValues = new AssertMethod8ExpectedValues();
                }
                return this.mAssertMethod8ExpectedValues;
            }
        }
        
        public virtual RecordedMethod9Params RecordedMethod9Params
        {
            get
            {
                if ((this.mRecordedMethod9Params == null))
                {
                    this.mRecordedMethod9Params = new RecordedMethod9Params();
                }
                return this.mRecordedMethod9Params;
            }
        }
        
        public virtual AssertMethod9ExpectedValues AssertMethod9ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod9ExpectedValues == null))
                {
                    this.mAssertMethod9ExpectedValues = new AssertMethod9ExpectedValues();
                }
                return this.mAssertMethod9ExpectedValues;
            }
        }
        
        public virtual RecordedMethod10Params RecordedMethod10Params
        {
            get
            {
                if ((this.mRecordedMethod10Params == null))
                {
                    this.mRecordedMethod10Params = new RecordedMethod10Params();
                }
                return this.mRecordedMethod10Params;
            }
        }
        
        public virtual AssertMethod10ExpectedValues AssertMethod10ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod10ExpectedValues == null))
                {
                    this.mAssertMethod10ExpectedValues = new AssertMethod10ExpectedValues();
                }
                return this.mAssertMethod10ExpectedValues;
            }
        }
        
        public virtual RecordedMethod11Params RecordedMethod11Params
        {
            get
            {
                if ((this.mRecordedMethod11Params == null))
                {
                    this.mRecordedMethod11Params = new RecordedMethod11Params();
                }
                return this.mRecordedMethod11Params;
            }
        }
        
        public virtual AssertMethod11ExpectedValues AssertMethod11ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod11ExpectedValues == null))
                {
                    this.mAssertMethod11ExpectedValues = new AssertMethod11ExpectedValues();
                }
                return this.mAssertMethod11ExpectedValues;
            }
        }
        
        public virtual RecordedMethod12Params RecordedMethod12Params
        {
            get
            {
                if ((this.mRecordedMethod12Params == null))
                {
                    this.mRecordedMethod12Params = new RecordedMethod12Params();
                }
                return this.mRecordedMethod12Params;
            }
        }
        
        public virtual RecordedMethod13Params RecordedMethod13Params
        {
            get
            {
                if ((this.mRecordedMethod13Params == null))
                {
                    this.mRecordedMethod13Params = new RecordedMethod13Params();
                }
                return this.mRecordedMethod13Params;
            }
        }
        
        public virtual AssertMethod12ExpectedValues AssertMethod12ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod12ExpectedValues == null))
                {
                    this.mAssertMethod12ExpectedValues = new AssertMethod12ExpectedValues();
                }
                return this.mAssertMethod12ExpectedValues;
            }
        }
        
        public UISpreadsheetprogramunWindow UISpreadsheetprogramunWindow
        {
            get
            {
                if ((this.mUISpreadsheetprogramunWindow == null))
                {
                    this.mUISpreadsheetprogramunWindow = new UISpreadsheetprogramunWindow();
                }
                return this.mUISpreadsheetprogramunWindow;
            }
        }
        
        public UISpreadsheetprogramunWindow1 UISpreadsheetprogramunWindow1
        {
            get
            {
                if ((this.mUISpreadsheetprogramunWindow1 == null))
                {
                    this.mUISpreadsheetprogramunWindow1 = new UISpreadsheetprogramunWindow1();
                }
                return this.mUISpreadsheetprogramunWindow1;
            }
        }
        
        public UIInvalidFormulaWindow UIInvalidFormulaWindow
        {
            get
            {
                if ((this.mUIInvalidFormulaWindow == null))
                {
                    this.mUIInvalidFormulaWindow = new UIInvalidFormulaWindow();
                }
                return this.mUIInvalidFormulaWindow;
            }
        }
        
        public UICircularReferenceWindow UICircularReferenceWindow
        {
            get
            {
                if ((this.mUICircularReferenceWindow == null))
                {
                    this.mUICircularReferenceWindow = new UICircularReferenceWindow();
                }
                return this.mUICircularReferenceWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UISpreadsheetprogramteWindow UISpreadsheetprogramteWindow
        {
            get
            {
                if ((this.mUISpreadsheetprogramteWindow == null))
                {
                    this.mUISpreadsheetprogramteWindow = new UISpreadsheetprogramteWindow();
                }
                return this.mUISpreadsheetprogramteWindow;
            }
        }
        
        public UIContinuesaveWindow UIContinuesaveWindow
        {
            get
            {
                if ((this.mUIContinuesaveWindow == null))
                {
                    this.mUIContinuesaveWindow = new UIContinuesaveWindow();
                }
                return this.mUIContinuesaveWindow;
            }
        }
        
        public UISpreadsheetprogramteWindow1 UISpreadsheetprogramteWindow1
        {
            get
            {
                if ((this.mUISpreadsheetprogramteWindow1 == null))
                {
                    this.mUISpreadsheetprogramteWindow1 = new UISpreadsheetprogramteWindow1();
                }
                return this.mUISpreadsheetprogramteWindow1;
            }
        }
        
        public UISpreadsheetprogramteWindow2 UISpreadsheetprogramteWindow2
        {
            get
            {
                if ((this.mUISpreadsheetprogramteWindow2 == null))
                {
                    this.mUISpreadsheetprogramteWindow2 = new UISpreadsheetprogramteWindow2();
                }
                return this.mUISpreadsheetprogramteWindow2;
            }
        }
        
        public UISelectaspreadsheetfiWindow UISelectaspreadsheetfiWindow
        {
            get
            {
                if ((this.mUISelectaspreadsheetfiWindow == null))
                {
                    this.mUISelectaspreadsheetfiWindow = new UISelectaspreadsheetfiWindow();
                }
                return this.mUISelectaspreadsheetfiWindow;
            }
        }
        
        public UISpreadsheetprogramteWindow11 UISpreadsheetprogramteWindow11
        {
            get
            {
                if ((this.mUISpreadsheetprogramteWindow11 == null))
                {
                    this.mUISpreadsheetprogramteWindow11 = new UISpreadsheetprogramteWindow11();
                }
                return this.mUISpreadsheetprogramteWindow11;
            }
        }
        
        public UISpreadsheetprogramteWindow3 UISpreadsheetprogramteWindow3
        {
            get
            {
                if ((this.mUISpreadsheetprogramteWindow3 == null))
                {
                    this.mUISpreadsheetprogramteWindow3 = new UISpreadsheetprogramteWindow3();
                }
                return this.mUISpreadsheetprogramteWindow3;
            }
        }
        
        public UISpreadsheetprogramteWindow4 UISpreadsheetprogramteWindow4
        {
            get
            {
                if ((this.mUISpreadsheetprogramteWindow4 == null))
                {
                    this.mUISpreadsheetprogramteWindow4 = new UISpreadsheetprogramteWindow4();
                }
                return this.mUISpreadsheetprogramteWindow4;
            }
        }
        
        public UIDefaultBrowserWindow UIDefaultBrowserWindow
        {
            get
            {
                if ((this.mUIDefaultBrowserWindow == null))
                {
                    this.mUIDefaultBrowserWindow = new UIDefaultBrowserWindow();
                }
                return this.mUIDefaultBrowserWindow;
            }
        }
        
        public UISpreadsheetHelpMozilWindow UISpreadsheetHelpMozilWindow
        {
            get
            {
                if ((this.mUISpreadsheetHelpMozilWindow == null))
                {
                    this.mUISpreadsheetHelpMozilWindow = new UISpreadsheetHelpMozilWindow();
                }
                return this.mUISpreadsheetHelpMozilWindow;
            }
        }
        
        public UISpreadsheetprogramteWindow21 UISpreadsheetprogramteWindow21
        {
            get
            {
                if ((this.mUISpreadsheetprogramteWindow21 == null))
                {
                    this.mUISpreadsheetprogramteWindow21 = new UISpreadsheetprogramteWindow21();
                }
                return this.mUISpreadsheetprogramteWindow21;
            }
        }
        
        public UIOpenErrorWindow UIOpenErrorWindow
        {
            get
            {
                if ((this.mUIOpenErrorWindow == null))
                {
                    this.mUIOpenErrorWindow = new UIOpenErrorWindow();
                }
                return this.mUIOpenErrorWindow;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private RecordedMethod6Params mRecordedMethod6Params;
        
        private AssertMethod6ExpectedValues mAssertMethod6ExpectedValues;
        
        private AssertMethod7ExpectedValues mAssertMethod7ExpectedValues;
        
        private RecordedMethod8Params mRecordedMethod8Params;
        
        private AssertMethod8ExpectedValues mAssertMethod8ExpectedValues;
        
        private RecordedMethod9Params mRecordedMethod9Params;
        
        private AssertMethod9ExpectedValues mAssertMethod9ExpectedValues;
        
        private RecordedMethod10Params mRecordedMethod10Params;
        
        private AssertMethod10ExpectedValues mAssertMethod10ExpectedValues;
        
        private RecordedMethod11Params mRecordedMethod11Params;
        
        private AssertMethod11ExpectedValues mAssertMethod11ExpectedValues;
        
        private RecordedMethod12Params mRecordedMethod12Params;
        
        private RecordedMethod13Params mRecordedMethod13Params;
        
        private AssertMethod12ExpectedValues mAssertMethod12ExpectedValues;
        
        private UISpreadsheetprogramunWindow mUISpreadsheetprogramunWindow;
        
        private UISpreadsheetprogramunWindow1 mUISpreadsheetprogramunWindow1;
        
        private UIInvalidFormulaWindow mUIInvalidFormulaWindow;
        
        private UICircularReferenceWindow mUICircularReferenceWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UISpreadsheetprogramteWindow mUISpreadsheetprogramteWindow;
        
        private UIContinuesaveWindow mUIContinuesaveWindow;
        
        private UISpreadsheetprogramteWindow1 mUISpreadsheetprogramteWindow1;
        
        private UISpreadsheetprogramteWindow2 mUISpreadsheetprogramteWindow2;
        
        private UISelectaspreadsheetfiWindow mUISelectaspreadsheetfiWindow;
        
        private UISpreadsheetprogramteWindow11 mUISpreadsheetprogramteWindow11;
        
        private UISpreadsheetprogramteWindow3 mUISpreadsheetprogramteWindow3;
        
        private UISpreadsheetprogramteWindow4 mUISpreadsheetprogramteWindow4;
        
        private UIDefaultBrowserWindow mUIDefaultBrowserWindow;
        
        private UISpreadsheetHelpMozilWindow mUISpreadsheetHelpMozilWindow;
        
        private UISpreadsheetprogramteWindow21 mUISpreadsheetprogramteWindow21;
        
        private UIOpenErrorWindow mUIOpenErrorWindow;
        
        private UIForm1Window mUIForm1Window;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = @"..\..\..\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string AlternateExePath = @"..\..\..\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Spreadsheet program - untitled' window's property 'Name' equals 'Spreadsheet program - untitled'
        /// </summary>
        public string UISpreadsheetprogramunWindowName = "Spreadsheet program - untitled";
        
        /// <summary>
        /// Verify that 'Spreadsheet program - untitled' window's property 'Exists' equals 'True'
        /// </summary>
        public bool UISpreadsheetprogramunWindowExists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Spreadsheet program - untitled' window's property 'Name' equals 'Spreadsheet program - untitled'
        /// </summary>
        public string UISpreadsheetprogramunWindow1Name = "Spreadsheet program - untitled";
        
        /// <summary>
        /// Verify that 'Spreadsheet program - untitled' window's property 'Exists' equals 'True'
        /// </summary>
        public bool UISpreadsheetprogramunWindow1Exists = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=aa3' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText = "=aa3";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'A formula may only contain (, ), +, -, *, /, numbe...' label's property 'DisplayText' equals 'A formula may only contain (, ), +, -, *, /, numbers and variables.'
        /// </summary>
        public string UIAformulamayonlycontaTextDisplayText = "A formula may only contain (, ), +, -, *, /, numbers and variables.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=a1' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText = "=a1";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Circular references are not permitted. A circular ...' label's property 'DisplayText' equals 'Circular references are not permitted.
        ///A circular reference is created when a cell in a formula depends on itself for value, e.g. when a cell in a formula refers to itself, or when a cell refers to another cell which itself refers to the original cell.'
        /// </summary>
        public string UICircularreferencesarTextDisplayText = "Circular references are not permitted.\nA circular reference is created when a cel" +
            "l in a formula depends on itself for value, e.g. when a cell in a formula refers" +
            " to itself, or when a cell refers to another cell which itself refers to the ori" +
            "ginal cell.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=A2' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText = "=A2";

        /// <summary>
        /// Type '{Enter}' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'CellNameBox' text box's property 'Text' equals 'A1'
        /// </summary>
        public string UICellNameBoxEditText = "A1";
        
        /// <summary>
        /// Verify that 'ValueBox' text box's property 'Text' equals 'FormulaError. Variable A2 uknown.'
        /// </summary>
        public string UIValueBoxEditText = "FormulaError. Variable A2 uknown.";
        
        /// <summary>
        /// Verify that 'ContentBox' text box's property 'Text' equals '=A2'
        /// </summary>
        public string UIContentBoxEditText = "=A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod6Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'cat' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText = "cat";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'CellNameBox' text box's property 'Text' equals 'A2'
        /// </summary>
        public string UICellNameBoxEditText = "A2";
        
        /// <summary>
        /// Verify that 'ValueBox' text box's property 'Text' equals 'cat'
        /// </summary>
        public string UIValueBoxEditText = "cat";
        
        /// <summary>
        /// Verify that 'ContentBox' text box's property 'Text' equals 'cat'
        /// </summary>
        public string UIContentBoxEditText = "cat";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'CellNameBox' text box's property 'Text' equals 'A1'
        /// </summary>
        public string UICellNameBoxEditText = "A1";
        
        /// <summary>
        /// Verify that 'ValueBox' text box's property 'Text' equals 'FormulaError. Variable A2 uknown.'
        /// </summary>
        public string UIValueBoxEditText = "FormulaError. Variable A2 uknown.";
        
        /// <summary>
        /// Verify that 'ContentBox' text box's property 'Text' equals '=A2'
        /// </summary>
        public string UIContentBoxEditText = "=A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod8Params
    {
        
        #region Fields
        /// <summary>
        /// Type '45' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditText = "45";
        
        /// <summary>
        /// Type '{Enter}' in 'ContentBox' text box
        /// </summary>
        public string UIContentBoxEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'CellNameBox' text box's property 'Text' equals 'A1'
        /// </summary>
        public string UICellNameBoxEditText = "A1";
        
        /// <summary>
        /// Verify that 'ValueBox' text box's property 'Text' equals '45'
        /// </summary>
        public string UIValueBoxEditText = "45";
        
        /// <summary>
        /// Verify that 'ContentBox' text box's property 'Text' equals '=A2'
        /// </summary>
        public string UIContentBoxEditText = "=A2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod9Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'test' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Spreadsheet program - test' title bar's property 'DisplayText' equals 'Spreadsheet program - test'
        /// </summary>
        public string UISpreadsheetprogramteTitleBarDisplayText = "Spreadsheet program - test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod10Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'test2' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Spreadsheet program - test' title bar's property 'DisplayText' equals 'Spreadsheet program - test2'
        /// </summary>
        public string UISpreadsheetprogramteTitleBarDisplayText = "Spreadsheet program - test2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod11Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'test' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'The file, "test.ss," already exists. The save oper...' label's property 'DisplayText' equals 'The file, "test.ss," already exists.
        ///The save operation will overwrite this file, and all previous information will be lost.
        ///Are you sure you want to continue?'
        /// </summary>
        public string UIThefiletestssalreadyTextDisplayText = "The file, \"test.ss,\" already exists.\nThe save operation will overwrite this file," +
            " and all previous information will be lost.\nAre you sure you want to continue?";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod12Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'test' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'Control + W' in 'Yes' button
        /// </summary>
        public string UIYesButtonSendKeys = "W";
        
        /// <summary>
        /// Type 'Control + W' in 'Spreadsheet Help' document
        /// </summary>
        public string UISpreadsheetHelpDocumentSendKeys = "W";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod13Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetprogramunWindowExePath = @"..\..\..\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetprogramunWindowAlternateExePath = @"..\..\..\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Spreadsheet could not open. Error. Exception of ty...' label's property 'Name' equals 'Spreadsheet could not open. Error. Exception of type 'SS.InvalidNameException' was thrown. Please close this spreadsheet window.'
        /// </summary>
        public string UISpreadsheetcouldnotoTextName = "Spreadsheet could not open. Error. Exception of type \'SS.InvalidNameException\' wa" +
            "s thrown. Please close this spreadsheet window.";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetprogramunWindow : WinWindow
    {
        
        public UISpreadsheetprogramunWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet program - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet program - untitled");
            this.WindowTitles.Add("Spreadsheet program - untitled - edited");
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public UIContentBoxWindow UIContentBoxWindow
        {
            get
            {
                if ((this.mUIContentBoxWindow == null))
                {
                    this.mUIContentBoxWindow = new UIContentBoxWindow(this);
                }
                return this.mUIContentBoxWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIValueBoxWindow UIValueBoxWindow
        {
            get
            {
                if ((this.mUIValueBoxWindow == null))
                {
                    this.mUIValueBoxWindow = new UIValueBoxWindow(this);
                }
                return this.mUIValueBoxWindow;
            }
        }
        
        public WinTitleBar UISpreadsheetprogramteTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetprogramteTitleBar == null))
                {
                    this.mUISpreadsheetprogramteTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUISpreadsheetprogramteTitleBar.WindowTitles.Add("Spreadsheet program - test");
                    #endregion
                }
                return this.mUISpreadsheetprogramteTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        
        private UIContentBoxWindow mUIContentBoxWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIA1Window mUIA1Window;
        
        private UIValueBoxWindow mUIValueBoxWindow;
        
        private WinTitleBar mUISpreadsheetprogramteTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet program - untitled");
            this.WindowTitles.Add("Spreadsheet program - untitled - edited");
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet program - untitled");
            this.WindowTitles.Add("Spreadsheet program - untitled - edited");
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet program - untitled");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet program - untitled - edited");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("Spreadsheet program - test");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet program - untitled");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet program - untitled");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIContentBoxWindow : WinWindow
    {
        
        public UIContentBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ContentBox";
            this.WindowTitles.Add("Spreadsheet program - untitled");
            #endregion
        }
        
        #region Properties
        public WinEdit UIContentBoxEdit
        {
            get
            {
                if ((this.mUIContentBoxEdit == null))
                {
                    this.mUIContentBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIContentBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Content";
                    this.mUIContentBoxEdit.WindowTitles.Add("Spreadsheet program - untitled");
                    #endregion
                }
                return this.mUIContentBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIContentBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet program - untitled");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet program - untitled");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellNameBox";
            this.WindowTitles.Add("Spreadsheet program - untitled - edited");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellNameBoxEdit
        {
            get
            {
                if ((this.mUICellNameBoxEdit == null))
                {
                    this.mUICellNameBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellNameBoxEdit.WindowTitles.Add("Spreadsheet program - untitled - edited");
                    #endregion
                }
                return this.mUICellNameBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellNameBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIValueBoxWindow : WinWindow
    {
        
        public UIValueBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "ValueBox";
            this.WindowTitles.Add("Spreadsheet program - untitled - edited");
            #endregion
        }
        
        #region Properties
        public WinEdit UIValueBoxEdit
        {
            get
            {
                if ((this.mUIValueBoxEdit == null))
                {
                    this.mUIValueBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIValueBoxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Value";
                    this.mUIValueBoxEdit.WindowTitles.Add("Spreadsheet program - untitled - edited");
                    #endregion
                }
                return this.mUIValueBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIValueBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetprogramunWindow1 : WinWindow
    {
        
        public UISpreadsheetprogramunWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet program - untitled";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet program - untitled");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet program - untitled");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet program - untitled");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet program - untitled");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIInvalidFormulaWindow : WinWindow
    {
        
        public UIInvalidFormulaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Invalid Formula";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Invalid Formula");
            #endregion
        }
        
        #region Properties
        public UIAformulamayonlycontaWindow UIAformulamayonlycontaWindow
        {
            get
            {
                if ((this.mUIAformulamayonlycontaWindow == null))
                {
                    this.mUIAformulamayonlycontaWindow = new UIAformulamayonlycontaWindow(this);
                }
                return this.mUIAformulamayonlycontaWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIAformulamayonlycontaWindow mUIAformulamayonlycontaWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIAformulamayonlycontaWindow : WinWindow
    {
        
        public UIAformulamayonlycontaWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Invalid Formula");
            #endregion
        }
        
        #region Properties
        public WinText UIAformulamayonlycontaText
        {
            get
            {
                if ((this.mUIAformulamayonlycontaText == null))
                {
                    this.mUIAformulamayonlycontaText = new WinText(this);
                    #region Search Criteria
                    this.mUIAformulamayonlycontaText.SearchProperties[WinText.PropertyNames.Name] = "A formula may only contain (, ), +, -, *, /, numbers and variables.";
                    this.mUIAformulamayonlycontaText.WindowTitles.Add("Invalid Formula");
                    #endregion
                }
                return this.mUIAformulamayonlycontaText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIAformulamayonlycontaText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Invalid Formula");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Invalid Formula");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICircularReferenceWindow : WinWindow
    {
        
        public UICircularReferenceWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Circular Reference!";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Circular Reference!");
            #endregion
        }
        
        #region Properties
        public UICircularreferencesarWindow UICircularreferencesarWindow
        {
            get
            {
                if ((this.mUICircularreferencesarWindow == null))
                {
                    this.mUICircularreferencesarWindow = new UICircularreferencesarWindow(this);
                }
                return this.mUICircularreferencesarWindow;
            }
        }
        
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICircularreferencesarWindow mUICircularreferencesarWindow;
        
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICircularreferencesarWindow : WinWindow
    {
        
        public UICircularreferencesarWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Circular Reference!");
            #endregion
        }
        
        #region Properties
        public WinText UICircularreferencesarText
        {
            get
            {
                if ((this.mUICircularreferencesarText == null))
                {
                    this.mUICircularreferencesarText = new WinText(this);
                    #region Search Criteria
                    this.mUICircularreferencesarText.SearchProperties[WinText.PropertyNames.Name] = "Circular references are not permitted.A circular reference is created when a cell" +
                        " in a formula depends on itself for value, e.g. when a cell in a formula refers " +
                        "to itself, or when a cell refers to another cell which itself refers to the orig" +
                        "inal cell.";
                    this.mUICircularreferencesarText.WindowTitles.Add("Circular Reference!");
                    #endregion
                }
                return this.mUICircularreferencesarText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUICircularreferencesarText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Circular Reference!");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Circular Reference!");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        
        private UIItemWindow1 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetprogramteWindow : WinWindow
    {
        
        public UISpreadsheetprogramteWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet program - test2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet program - test2");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet program - test2");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet program - test2");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet program - test2");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("Spreadsheet program - test2");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIContinuesaveWindow : WinWindow
    {
        
        public UIContinuesaveWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Continue save?";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Continue save?");
            #endregion
        }
        
        #region Properties
        public UIThefiletestssalreadyWindow UIThefiletestssalreadyWindow
        {
            get
            {
                if ((this.mUIThefiletestssalreadyWindow == null))
                {
                    this.mUIThefiletestssalreadyWindow = new UIThefiletestssalreadyWindow(this);
                }
                return this.mUIThefiletestssalreadyWindow;
            }
        }
        
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIThefiletestssalreadyWindow mUIThefiletestssalreadyWindow;
        
        private UINOWindow mUINOWindow;
        
        private UIYesWindow mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIThefiletestssalreadyWindow : WinWindow
    {
        
        public UIThefiletestssalreadyWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Continue save?");
            #endregion
        }
        
        #region Properties
        public WinText UIThefiletestssalreadyText
        {
            get
            {
                if ((this.mUIThefiletestssalreadyText == null))
                {
                    this.mUIThefiletestssalreadyText = new WinText(this);
                    #region Search Criteria
                    this.mUIThefiletestssalreadyText.SearchProperties[WinText.PropertyNames.Name] = "The file, \"test.ss,\" already exists.The save operation will overwrite this file, " +
                        "and all previous information will be lost.Are you sure you want to continue?";
                    this.mUIThefiletestssalreadyText.WindowTitles.Add("Continue save?");
                    #endregion
                }
                return this.mUIThefiletestssalreadyText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIThefiletestssalreadyText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Continue save?");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Continue save?");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Continue save?");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Continue save?");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetprogramteWindow1 : WinWindow
    {
        
        public UISpreadsheetprogramteWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet program - test2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet program - test2");
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar3 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar3(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar3 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar3 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet program - test2");
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem3 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem3(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem3 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem3 : WinMenuItem
    {
        
        public UIFileMenuItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet program - test2");
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("Spreadsheet program - test2");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveAsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetprogramteWindow2 : WinWindow
    {
        
        public UISpreadsheetprogramteWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet program - test2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet program - test2");
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar4 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar4(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar4 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar4 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet program - test2");
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem4 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem4(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem4 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem4 : WinMenuItem
    {
        
        public UIFileMenuItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet program - test2");
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet program - test");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISelectaspreadsheetfiWindow : WinWindow
    {
        
        public UISelectaspreadsheetfiWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Select a spreadsheet file";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Select a spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Select a spreadsheet file");
            #endregion
        }
        
        #region Properties
        public UITest2ListItem UITest2ListItem
        {
            get
            {
                if ((this.mUITest2ListItem == null))
                {
                    this.mUITest2ListItem = new UITest2ListItem(this);
                }
                return this.mUITest2ListItem;
            }
        }
        
        public UITesterssListItem UITesterssListItem
        {
            get
            {
                if ((this.mUITesterssListItem == null))
                {
                    this.mUITesterssListItem = new UITesterssListItem(this);
                }
                return this.mUITesterssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITest2ListItem mUITest2ListItem;
        
        private UITesterssListItem mUITesterssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITest2ListItem : WinListItem
    {
        
        public UITest2ListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test2";
            this.WindowTitles.Add("Select a spreadsheet file");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Select a spreadsheet file");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITesterssListItem : WinListItem
    {
        
        public UITesterssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "tester.ss";
            this.WindowTitles.Add("Select a spreadsheet file");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Select a spreadsheet file");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetprogramteWindow11 : WinWindow
    {
        
        public UISpreadsheetprogramteWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet program - test2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet program - test2");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar5 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar5(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar5 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar5 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet program - test2");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem5 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem5(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem5 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem5 : WinMenuItem
    {
        
        public UIFileMenuItem5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet program - test2");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet program - test2");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetprogramteWindow3 : WinWindow
    {
        
        public UISpreadsheetprogramteWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet program - test2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet program - test2");
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar6 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar6(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar6 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar6 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet program - test2");
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIFileMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
                    this.mUIFileMenuItem.WindowTitles.Add("Spreadsheet program - test2");
                    this.mUIFileMenuItem.WindowTitles.Add("Spreadsheet program - test");
                    #endregion
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetprogramteWindow4 : WinWindow
    {
        
        public UISpreadsheetprogramteWindow4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet program - test2";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet program - test2");
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar7 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar7(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar7 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar7 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet program - test2");
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIViewHelpMenuItem
        {
            get
            {
                if ((this.mUIViewHelpMenuItem == null))
                {
                    this.mUIViewHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIViewHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "View Help";
                    this.mUIViewHelpMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIViewHelpMenuItem.WindowTitles.Add("Spreadsheet program - test");
                    #endregion
                }
                return this.mUIViewHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIViewHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDefaultBrowserWindow : WinWindow
    {
        
        public UIDefaultBrowserWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Default Browser";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaDialogClass";
            this.WindowTitles.Add("Default Browser");
            #endregion
        }
        
        #region Properties
        public UIDefaultBrowserDialog UIDefaultBrowserDialog
        {
            get
            {
                if ((this.mUIDefaultBrowserDialog == null))
                {
                    this.mUIDefaultBrowserDialog = new UIDefaultBrowserDialog(this);
                }
                return this.mUIDefaultBrowserDialog;
            }
        }
        #endregion
        
        #region Fields
        private UIDefaultBrowserDialog mUIDefaultBrowserDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDefaultBrowserDialog : WinControl
    {
        
        public UIDefaultBrowserDialog(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Default Browser";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
            this.WindowTitles.Add("Default Browser");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Default Browser");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetHelpMozilWindow : WinWindow
    {
        
        public UISpreadsheetHelpMozilWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet Help - Mozilla Firefox";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MozillaWindowClass";
            this.WindowTitles.Add("Spreadsheet Help - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public UIItemPropertyPage UIItemPropertyPage
        {
            get
            {
                if ((this.mUIItemPropertyPage == null))
                {
                    this.mUIItemPropertyPage = new UIItemPropertyPage(this);
                }
                return this.mUIItemPropertyPage;
            }
        }
        #endregion
        
        #region Fields
        private UIItemPropertyPage mUIItemPropertyPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemPropertyPage : WinControl
    {
        
        public UIItemPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            this.WindowTitles.Add("Spreadsheet Help - Mozilla Firefox");
            #endregion
        }
        
        #region Properties
        public WinControl UISpreadsheetHelpDocument
        {
            get
            {
                if ((this.mUISpreadsheetHelpDocument == null))
                {
                    this.mUISpreadsheetHelpDocument = new WinControl(this);
                    #region Search Criteria
                    this.mUISpreadsheetHelpDocument.SearchProperties[UITestControl.PropertyNames.Name] = "Spreadsheet Help";
                    this.mUISpreadsheetHelpDocument.SearchProperties[UITestControl.PropertyNames.ControlType] = "Document";
                    this.mUISpreadsheetHelpDocument.WindowTitles.Add("Spreadsheet Help - Mozilla Firefox");
                    #endregion
                }
                return this.mUISpreadsheetHelpDocument;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUISpreadsheetHelpDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetprogramteWindow21 : WinWindow
    {
        
        public UISpreadsheetprogramteWindow21()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet program - test";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar8 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar8(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar8 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar8 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem6 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem6(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem6 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem6 : WinMenuItem
    {
        
        public UIFileMenuItem6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet program - test");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet program - test");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenErrorWindow : WinWindow
    {
        
        public UIOpenErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open Error");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetcouldnotoWindow UISpreadsheetcouldnotoWindow
        {
            get
            {
                if ((this.mUISpreadsheetcouldnotoWindow == null))
                {
                    this.mUISpreadsheetcouldnotoWindow = new UISpreadsheetcouldnotoWindow(this);
                }
                return this.mUISpreadsheetcouldnotoWindow;
            }
        }
        
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetcouldnotoWindow mUISpreadsheetcouldnotoWindow;
        
        private UIOKWindow2 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetcouldnotoWindow : WinWindow
    {
        
        public UISpreadsheetcouldnotoWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "65535";
            this.WindowTitles.Add("Open Error");
            #endregion
        }
        
        #region Properties
        public WinText UISpreadsheetcouldnotoText
        {
            get
            {
                if ((this.mUISpreadsheetcouldnotoText == null))
                {
                    this.mUISpreadsheetcouldnotoText = new WinText(this);
                    #region Search Criteria
                    this.mUISpreadsheetcouldnotoText.SearchProperties[WinText.PropertyNames.Name] = "Spreadsheet could not open. Error. Exception of type \'SS.InvalidNameException\' wa" +
                        "s thrown. Please close this spreadsheet window.";
                    this.mUISpreadsheetcouldnotoText.WindowTitles.Add("Open Error");
                    #endregion
                }
                return this.mUISpreadsheetcouldnotoText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUISpreadsheetcouldnotoText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Open Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar9 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar9(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar9 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStrip1MenuBar9 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem7 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem7(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem7 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem7 : WinMenuItem
    {
        
        public UIFileMenuItem7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
}
